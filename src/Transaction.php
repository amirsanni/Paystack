<?php
namespace amirsanni\paystacklib;

class Transaction extends Master{
    public $per_page = 50;
    public $page_number = 1;

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    public function __construct($secret_key){
        //set parent class $secret_key property
        $this->secret_key = $secret_key;
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param array $trans_data
     */
    public function make(array $trans_data){
        if($trans_data['ref'] && $trans_data['amount_in_kobo'] && $trans_data['email']){
            //https://api.paystack.co/transaction/initialize
            $url = "https://api.paystack.co/transaction/initialize/";
                
            $post_data = [
                'reference'=>$trans_data['ref'],
                'amount'=>$trans_data['amount_in_kobo'],
                'email'=>$trans_data['email'],
                'metadata'=>json_encode($trans_data['metadata']),
                'callback_url'=>$trans_data['callback_url']
            ];
            
            //curl($url, $use_post, $post_data=[])
            $response = json_decode($this->curl($url, TRUE, $post_data));
            
            //api request failed
            if($response){
                if(isset($response->data) && isset($response->data->authorization_url)){
                    $this->redirect($response->data->authorization_url);
                }

                else{
                    return $response;
                }
            }

            return FALSE;
        }
        
        return FALSE;
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $ref
     */
    public function verify($ref){
        //https://api.paystack.co/transaction/verify/:reference
        $url = "https://api.paystack.co/transaction/verify/{$ref}";
        
        //curl($url, $use_post, $post_data=[])
        return json_decode($this->curl($url, FALSE));
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param int $transaction_id
     */
    public function getOne($transaction_id){
        //https://api.paystack.co/transaction/id
        $url = "https://api.paystack.co/transaction/{$transaction_id}";
        
        //curl($url, $use_post, $post_data=[])
        return json_decode($this->curl($url, FALSE));
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $customer_id
     * @param string $status
     * @param string $from_date
     * @param string $to_date
     */
    private function listTransactions($customer_id='', $status='', $from_date='', $to_date=''){
        //https://api.paystack.co/transaction
        $url = "https://api.paystack.co/transaction?perPage={$this->per_page}&page={$this->page_number}&status={$status}&customer={$customer_id}&from={$from_date}&to={$to_date}";
        
        //curl($url, $use_post, $post_data=[])
        return json_decode($this->curl($url, FALSE));
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * 
     */
    public function getMany(){
        return $this->listTransactions();
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $status Options are 'failed', 'success', 'abandoned'
     */
    public function whereStatus($status='success'){
        return $this->listTransactions('', $status, '', '');
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $from
     * @param string $to
     */
    public function betweenDates($from, $to){
        $from_date = $from ? (new \DateTime($from))->format('Y-m-d') : "";
        $to_date = $to ? (new \DateTime($to))->format('Y-m-d') : "";

        if($from_date && $to_date){
            return $from_date && $to_date ? $this->listTransactions('', '', $from_date, $to_date) : "";
        }

        return FALSE;
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param int $customer_id
     */
    public function whereCustomer($customer_id){
        return $this->listTransactions($customer_id, '', '', '');
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $ref
     */
    public function timeline($ref){
        //https://api.paystack.co/transaction/timeline/:id_or_reference
        $url = "https://api.paystack.co/transaction/timeline/{$ref}";
        
        //curl($url, $use_post, $post_data=[])
        return json_decode($this->curl($url, FALSE));
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */
    
    public function allTime(){
        //https://api.paystack.co/transaction/totals
        $url = "https://api.paystack.co/transaction/totals";
        
        //curl($url, $use_post, $post_data=[])
        return json_decode($this->curl($url, FALSE));
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $from
     * @param string $to
     */
    public function totalBetweenDates($from, $to){
        $from_date = $from ? (new \DateTime($from))->format('Y-m-d') : "";
        $to_date = $to ? (new \DateTime($to))->format('Y-m-d') : "";

        if($from_date && $to_date){
            //https://api.paystack.co/transaction/totals
            $url = "https://api.paystack.co/transaction/totals?from={$from_date}&to={$to_date}";
            
            //curl($url, $use_post, $post_data=[])
            return json_decode($this->curl($url, FALSE));
        }

        return FALSE;
    }

    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */

    /**
     * @param string $from
     * @param string $to
     */
    public function export($from='', $to=''){
        $from_date = (new \DateTime($from))->format('Y-m-d');
        $to_date = (new \DateTime($to))->format('Y-m-d');

        //https://api.paystack.co/transaction/export
        $url = "https://api.paystack.co/transaction/export?from={$from_date}&to={$to_date}";
        
        //curl($url, $use_post, $post_data=[])
        $response = json_decode($this->curl($url, FALSE));

        if($response && ($response->status) && ($response->data) && ($response->data->path)){
            $this->redirect($response->data->path);
        }

        return FALSE;
    }
    
    /*
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    ********************************************************************************************************************************
    */
    
    public function chargeReturningCustomer($auth_code, $amount_in_kobo, $email, $ref="", $metadata_arr=[]){        
        if($auth_code && $amount_in_kobo && $email){
            //https://api.paystack.co/transaction/charge_authorization
            $url = "https://api.paystack.co/transaction/charge_authorization/";
                
            $post_data = [
                'authorization_code'=>$auth_code,
                'amount'=>$amount_in_kobo,
                'email'=>$email,
                'reference'=>$ref,
                'metadata'=>json_encode($metadata_arr)
            ];
            //curl($url, $use_post, $post_data=[])
            $response = $this->curl($url, TRUE, $post_data);
            
            if($response){                
                //return the whole json decoded object 
                return json_decode($response);
            }
            
            //api request failed
            return FALSE;
        }
        
        //required fields are not set
        return FALSE;
    }
}